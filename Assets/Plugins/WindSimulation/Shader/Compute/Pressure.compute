#pragma kernel CSWindMain

#include "../HLSL/WindComputeTools.hlsl"

RWTexture3D<float> DivergenceTex;
RWTexture3D<float> PressureTex;

RWTexture3D<float> ResultTex;

[numthreads(8, 8, 8)]
void CSWindMain(uint3 id: SV_DispatchThreadID)
{
    if (IsBorder(id.xyz))
    {
        ResultTex[id.xyz] = 0;
        return;
    }
    
    float L = PressureTex[id - uint3(1, 0, 0)].x;
    float R = PressureTex[id + uint3(1, 0, 0)].x;
    float F = PressureTex[id + uint3(0, 0, 1)].x;
    float B = PressureTex[id - uint3(0, 0, 1)].x;
    // float T = PressureTex[id + uint3(0, 1, 0)].x;
    // float D = PressureTex[id - uint3(0, 1, 0)].x;
    // float C = PressureTex[id ].x;
    
    float divergence = DivergenceTex[id].x;
    
    // float pressure = (R + L + B + F + T + D - divergence) / 6.0f * 0.9999f;
    float pressure = (R + L + B + F - divergence) * 0.25 * 0.9999f;
    
    ResultTex[id] = pressure;
}